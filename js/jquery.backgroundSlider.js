// Generated by CoffeeScript 1.6.2
(function() {
  var $, BackgroundSlider, WindowResize, debounce, windowResize,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = window.jQuery;

  debounce = function(func, wait, immediate) {
    var timeout;

    timeout = null;
    return function() {
      var args, callNow, context, later;

      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      context = this;
      later = function() {
        timeout = null;
        if (!immediate) {
          return func.apply(context, args);
        }
      };
      callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) {
        return func.apply(context, args);
      }
    };
  };

  WindowResize = (function() {
    function WindowResize() {
      this.removeListener = __bind(this.removeListener, this);
      this.addListener = __bind(this.addListener, this);
      this._handle = __bind(this._handle, this);      this.$w = $(window);
      this.handlers = [];
      this.windowWidth = this.$w.width();
      this.windowHeight = this.$w.height();
      this.handle = debounce(this._handle, 150);
      this.$w.resize(this.handle);
    }

    WindowResize.prototype._handle = function() {
      var handler, _i, _len, _ref, _results;

      this.windowWidth = this.$w.width();
      this.windowHeight = this.$w.height();
      _ref = this.handlers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        _results.push(handler.call(handler, this.windowWidth, this.windowHeight));
      }
      return _results;
    };

    WindowResize.prototype.addListener = function(hndlr) {
      var handler, _i, _len, _ref;

      _ref = this.handlers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        if (hndlr === handler) {
          return false;
        }
      }
      this.handlers.push(hndlr);
      hndlr.call(hndlr, this.windowWidth, this.windowHeight);
      return true;
    };

    WindowResize.prototype.removeListener = function(hndlr) {
      var handler, removed, _handlers, _i, _len, _ref;

      _handlers = [];
      removed = false;
      _ref = this.handlers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handler = _ref[_i];
        if (handler !== hndlr) {
          _handlers.push(handler);
        } else {
          removed = true;
        }
      }
      this.handlers = _handlers;
      return removed;
    };

    return WindowResize;

  })();

  windowResize = new WindowResize;

  BackgroundSlider = (function() {
    function BackgroundSlider(el, opts) {
      var $firstSlide, firstSlide;

      this.el = el;
      this.opts = opts;
      this.handleResize = __bind(this.handleResize, this);
      this.getOriginalImgSizes = __bind(this.getOriginalImgSizes, this);
      this.nextSlide = __bind(this.nextSlide, this);
      this.anim_reveal = __bind(this.anim_reveal, this);
      this.getSlide = __bind(this.getSlide, this);
      this.$el = $(this.el);
      this.lis = $('li', this.$el);
      this.imgs = $('img', this.lis);
      if (this.opts.injectStyles) {
        this.setBaseStyles();
      }
      this.ready = false;
      this.$w = $(window);
      this.$w.load(this.getOriginalImgSizes);
      this.slideNum = this.opts.current;
      this.animType = this.opts.animType.toLowerCase();
      firstSlide = this.lis[this.slideNum];
      $firstSlide = $(firstSlide);
      $firstSlide.css({
        zIndex: 10,
        display: 'block'
      });
      this.currentSlide = $firstSlide;
      setInterval(this.nextSlide, this.opts.delay);
    }

    BackgroundSlider.prototype.getSlide = function() {
      if (this.slideNum > this.lis.length) {
        this.slideNum = 0;
      } else {
        this.slideNum += 1;
      }
      return this.lis[this.slideNum];
    };

    BackgroundSlider.prototype.anim_reveal = function(newSlide, oldSlide) {
      var _this = this;

      newSlide.css({
        zIndex: 5,
        display: 'block',
        left: '0px'
      });
      return (function(newSlide, oldSlide) {
        return oldSlide.animate({
          left: "-" + (_this.$w.width()) + "px"
        }, {
          easing: _this.opts.easing,
          duration: _this.opts.animationTime
        }, function() {
          oldSlide.css({
            display: 'none',
            zIndex: 1
          });
          return newSlide.css({
            zIndex: 10
          });
        });
      })(newSlide, oldSlide);
    };

    BackgroundSlider.prototype.nextSlide = function() {
      var newSlide, oldSlide;

      oldSlide = this.currentSlide;
      newSlide = $(this.getSlide());
      this["anim_" + this.animType](newSlide, oldSlide);
      return this.currentSlide = newSlide;
    };

    BackgroundSlider.prototype.setBaseStyles = function() {
      this.$el.css({
        listStyle: 'none',
        margin: '0',
        padding: '0',
        overflow: 'hidden',
        width: '100%',
        height: '100%',
        position: 'fixed',
        top: '0',
        left: '0'
      });
      this.lis.css({
        listStyle: 'none',
        margin: '0',
        padding: '0',
        position: 'absolute',
        top: '0',
        left: '0',
        width: '100%',
        height: '100%',
        display: 'none',
        overflow: 'hidden',
        zIndex: 1
      });
      return this.imgs.css({
        position: 'absolute',
        top: '0',
        left: '0'
      });
    };

    BackgroundSlider.prototype.getOriginalImgSizes = function() {
      var $img, img, imgs, wh, ww, _i, _len, _ref;

      imgs = [];
      ww = this.$w.width();
      wh = this.$w.height();
      _ref = this.imgs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        img = _ref[_i];
        $img = $(img);
        imgs.push({
          origWidth: $img.width(),
          origHeight: $img.height(),
          $img: $img
        });
      }
      this.imgs = imgs;
      this.ready = true;
      windowResize.addListener(this.handleResize);
      return this.updateImgs(this.$w.width(), this.$w.height());
    };

    BackgroundSlider.prototype.handleResize = function(w, h) {
      if (!this.ready) {
        return;
      }
      return this.updateImgs(w, h);
    };

    BackgroundSlider.prototype.updateImgs = function(w, h) {
      var img, _i, _len, _ref, _results;

      _ref = this.imgs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        img = _ref[_i];
        _results.push(this.updateImg(w, h, img));
      }
      return _results;
    };

    BackgroundSlider.prototype.updateImg = function(w, h, img) {
      var $img, height, highestScale, ih, iw, left, top, width;

      $img = img.$img;
      iw = img.origWidth;
      ih = img.origHeight;
      highestScale = Math.max(w / iw, h / ih);
      width = Math.round(iw * highestScale);
      height = Math.round(ih * highestScale);
      left = Math.round((w / 2) - (width / 2));
      top = Math.round((h / 2) - (height / 2));
      $img.css({
        width: "" + width + "px",
        height: "" + height + "px",
        top: "" + top + "px",
        left: "" + left + "px"
      });
      return void 0;
    };

    return BackgroundSlider;

  })();

  $.fn.backgroundSlider = function($o) {
    var _o;

    _o = $.extend({
      easing: 'linear',
      delay: 6000,
      animationTime: 600,
      current: 0,
      sliding: false,
      animType: 'reveal',
      injectStyles: false
    }, $o);
    return this.each(function(i, el) {
      var slider;

      slider = new BackgroundSlider(el, _o);
      return $(el).data('slider', slider);
    });
  };

}).call(this);
